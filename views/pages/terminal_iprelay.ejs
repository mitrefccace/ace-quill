<html>

<head>
    <title>ACE Quill Terminal</title>
    <link type="text/css" rel="stylesheet" href="/assets/css/bootstrap.min.css">
    <link type="text/css" rel="stylesheet" href="/assets/css/adminlte.min.css">

    <link type="text/css" rel="stylesheet" href="/stylesheets/iprelay.css">

    <link rel="stylesheet" href="/assets/css/font-awesome.min.css">
    <script src='/assets/js/jquery.min.js'></script>
    <script src='/assets/js/bootstrap.js'></script>
    <script src='/assets/js/adminlte.min.js'></script>

    <script src='/assets/js/jssip.min.js'></script>
    <script src='/assets/js/RecordRTC.js'></script>
    <script src='/assets/js/html2canvas.min.js'></script>
</head>

<body class="hold-transition" id="pagebody">
    <div id="toRecord">
    <!-- Site wrapper -->
    <div class="wrapper h-100">
        <nav class="main-header navbar navbar-expand navbar-white navbar-light">
            <div class="col-2 offset-4" style="white-space:nowrap;">
                <span id='extensionInfo'><i class="fa fa-circle text-gray"></i> No Registered Extension</span>
            </div>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown messages-menu">
                    <a class="nav-link" data-toggle="dropdown" href="#">
                        <i id="recordOptions" class="fa fa-video-camera" title=""></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right">
                        <div class="container pt-1 pb-1">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="recordCamera" checked>
                                <label class="form-check-label" for="recordCamera">
                                    Record Camera
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="recordScreen" checked>
                                <label class="form-check-label" for="recordScreen">
                                    Record Screen
                                </label>
                            </div>
                        </div>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link" data-toggle="dropdown" href="#">
                        <i id="keyboardConnected" class="fa fa-keyboard-o" title=""></i></a>
                    <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
                        <div class="container text-center pt-1 pb-1">
                            The ACE Quill Keyboard uses a self-signed certificate which may block the browser
                            from communicating with it. Click the button below to accept the certificate. Test will send
                            some text to the ACE Quill Keyboard application.
                            <br />
                            <button type="button" id='kbCert_btn' class="btn btn-sm btn-danger">Accept Cert.</button>
                            <button type="button" id='kbTest_btn' class="btn btn-sm btn-success">Test</button>
                        </div>
                    </div>
                </li>

                <li class="nav-item ">
                    <a class="nav-link" href="#" onclick="refreshTest();">
                        <i class="fa fa-repeat"></i></a>
                </li>

                <li class="nav-item ">
                    <a class="nav-link" data-widget="control-sidebar" data-slide="true" href="#">
                        <i class="fa fa-gears"></i></a>
                </li>
            </ul>

        </nav>
        <aside class="main-sidebar sidebar-dark-primary elevation-4">
            <div class="sidebar">
                <div class="dialpadcontainer">
                    <div id="output" tabindex="0"></div>
                    <div class="row">
                        <div class="digit" id="one">1</div>
                        <div class="digit" id="two">2
                            <div class="sub">ABC</div>
                        </div>
                        <div class="digit" id="three">3
                            <div class="sub">DEF</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="digit" id="four">4
                            <div class="sub">GHI</div>
                        </div>
                        <div class="digit" id="five">5
                            <div class="sub">JKL</div>
                        </div>
                        <div class="digit">6
                            <div class="sub">MNO</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="digit">7
                            <div class="sub">PQRS</div>
                        </div>
                        <div class="digit">8
                            <div class="sub">TUV</div>
                        </div>
                        <div class="digit">9
                            <div class="sub">WXYZ</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="digit">*
                        </div>
                        <div class="digit">0
                        </div>
                        <div class="digit">#
                        </div>
                    </div>
                    <div class="botrow">
                        <div id="call_btn"><i class="fa fa-phone" aria-hidden="true"></i></div>
                        <i class="fa fa-long-arrow-left dig" aria-hidden="true"></i>
                    </div>
                </div>

                <!-- call history and favorites -->
                <div class="nav-tabs-custom card">
                    <ul class="nav nav-tabs  mb-3">
                        <li class="nav-item"><a href="#tab_history" data-toggle="pill" aria-expanded="false" role="tab"
                                class="nav-link active"><i class="fa fa-history"></i>&nbsp;History</a>
                        </li>
                        <li class="nav-item"><a href="#tab_contacts" data-toggle="pill" aria-expanded="false" role="tab"
                                class="nav-link"><i class="fa fa-address-book"></i>&nbsp;Contacts</a></li>
                    </ul>
                    <div class="tab-content ">
                        <div class="tab-pane active" id="tab_history">
                            <div class="col-12"></div>
                            <ul id="call_history" style="padding-left: 0.5em; padding-right: 0.5em;">
                            </ul>
                        </div>
                        <div class="tab-pane" id="tab_contacts">
                            <div class="col-12"></div>
                            <ul id="contacts" style="padding-left: 0.5em; padding-right: 0.5em;">
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </aside>
        <div class='content-wrapper  d-flex flex-column'>
            <div class="row flex-fill d-flex ">
                <div class="col-6">
                    <div class="row h-25 pb-5">
                        <div class="col-12">
                            <div class="card mt-1 h-100">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-5">
                                            <p class="h6"><span class="text-bold">Time:&nbsp;&nbsp;</span><span
                                                    id="timenow"></span></p>
                                            <p class="h6"><span class="text-bold">Call Answered:&nbsp;&nbsp;</span><span
                                                    id="callAnswerTime"></span></p>
                                            <p class="h6"><span class="text-bold">Call End:&nbsp;&nbsp;</span><span
                                                    id="callEndTime"></span>
                                            </p>
                                            <p class="h6"><span class="text-bold">Duration:&nbsp;&nbsp;</span><span
                                                    id="minutes">00</span>:<span id="seconds">00</span></p>
                                        </div>
                                        <div class="col-7">
                                            <textarea id="callNotes" style="min-width: 100%; min-height: 100%;" placeholder="Notes..."></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row h-75">
                        <div class="col-12">
                            <pre id="terminal" class="terminal">
<output id="history">
Welcome to the ACE Quill terminal.
</output>
<output id="app-output"></output>
</pre>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="row h-50 bg-black">
                        <div class="col-12">
                            <video autoplay="true" width="100%" height="100%" id="webCamElement"></video>
                        </div>
                    </div>
                    <div class="row h-50 pb-5 pt-1">
                        <div class="col-12">
                            <div class="card mt-1 h-100 direct-chat direct-chat-warning">
                                <div class="card-header">
                                    Scenario
                                </div>
                                <div class="card-body ">
                                    <div class="direct-chat-messages" id="scenarioChat"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </div>
        <audio id='remoteView' hidden></audio>
        <audio id='selfView' hidden></audio>
        <aside class="control-sidebar control-sidebar-dark">
            <div class="sidebar-form">
                <form role="form">
                    <div class="form-group">
                        <label>Extension</label>
                        <input type="text" class="form-control form-control-sm" placeholder="Extension"
                            id="sipExtension">
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" class="form-control form-control-sm" placeholder="Password"
                            id="sipPassword">
                    </div>
                    <div class="form-group">
                        <label>Server</label>
                        <input type="text" class="form-control form-control-sm" placeholder="servername:port"
                            id="sipServer">
                    </div>
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-success btn-sm" id='registerBtn'>Register</button>
                        <button type="button" class="btn btn-danger btn-sm" id='logoutBtn'>Log Out</button>
                    </div>
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-default btn-sm" id='clearBtn'>Clear Terminal</button>
                    </div>
                </form>
            </div>
        </aside>

    </div>
    <div class="modal fade" tabindex="-1" role="dialog" id="incomingCallModal">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Incoming Call</h5>
                </div>
                <div class="modal-body">
                    Caller ID: <span id="callerId">7001</span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="answerBtn">Answer</button>
                    <button type="button" class="btn btn-danger" id="ignoreBtn">Ignore</button>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
<script>JsSIP.debug.enable('JsSIP:*');</script>
<script>
    var currentCallID;
    function fixCert() {
        var asteriskHost = $('#sipServer').val();
        window.open('https://' + asteriskHost + '/ws');
    }

    $(document).ready(function () {
        $('#sipExtension').val(localStorage.getItem('sipExtension'));
        $('#sipPassword').val(localStorage.getItem('sipPassword'));
        $('#sipServer').val(localStorage.getItem('sipServer'));


        if (!localStorage.recordScreen)
            localStorage.setItem('recordScreen', true)
        if (!localStorage.recordCamera)
            localStorage.setItem('recordCamera', true)

        $('#recordScreen').prop('checked', (localStorage.getItem('recordScreen') == 'true'))
        $('#recordCamera').prop('checked', (localStorage.getItem('recordCamera') == 'true'))

        if (localStorage.getItem('sipServer') != null)
            registerJsSip();

        updateClock()
        setInterval(() => {
            updateClock()
        }, 1000);

    });

    $('#recordScreen').change(function () {
        localStorage.setItem('recordScreen', this.checked);
    });

    $('#recordCamera').change(function () {
        localStorage.setItem('recordCamera', this.checked);
    });

    function refreshTest() {
        $('#history').html('');
        $('#app-output').html('');
        $('#scenarioChat').html('');
        scrollPage();
        writeToConsole("Welcome to the ACE Quill terminal.");
        registerJsSip();
        loadIPRelayScenario();

        totalDurationSeconds = -1;
        setTime()
        document.getElementById("callAnswerTime").innerHTML = '';
        document.getElementById("callEndTime").innerHTML = '';
        document.getElementById("callNotes").value = '';
    }

    var updateClock = () => {
        let dt = new Date();
        document.getElementById("timenow").innerHTML = dt.toLocaleString();
    };

    var minutesLabel = document.getElementById("minutes");
    var secondsLabel = document.getElementById("seconds");
    var totalDurationSeconds, durationTimer;

    function setTime() {
        ++totalDurationSeconds;
        secondsLabel.innerHTML = pad(totalDurationSeconds % 60);
        minutesLabel.innerHTML = pad(parseInt(totalDurationSeconds / 60));
    }

    function pad(val) {
        var valString = val + "";
        if (valString.length < 2) {
            return "0" + valString;
        } else {
            return valString;
        }
    }


    $('#ttsEnabledCheckbox').change(function () {
        localStorage.setItem('ttsEnabled', this.checked);
        if (this.checked) {
            $('#ttsFooter').removeAttr("hidden");
        } else {
            $('#ttsFooter').attr("hidden", true);
        }
    });

    $("#ttsForm").submit(function (e) {
        e.preventDefault();
        var ttsText = $('#ttsText').val()
        $.ajax({
            url: './terminal/texttospeech',
            type: 'POST',
            data: { "text": ttsText, "extension": localStorage.getItem('sipExtension') },
            datatype: 'json',
            success: function (data) {
                playTextToSpeech(data)
                writeToConsole('<span class="text-yellow">> ' + ttsText + '</span>');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("error")
            }
        });

        $('#ttsForm').trigger("reset");
    });

    function playTextToSpeech(data) {
        selfStream.src = './terminal/playTextToSpeech?audiofile=' + data.audiofile;
        selfStream.type = 'type="audio/wav"';
        selfStream.loop = false;
        selfStream.muted = false

        var playPromise = selfStream.play();
        if (playPromise !== undefined) {
            playPromise.then(function () {//currentSession.unmute({audio: false, video: true});
            }).catch(function (error) {
                console.error('ERROR - this browser does not support play() Promise');
            });
        }

        selfStream.onplay = function () {
            var stream = selfStream.captureStream();
            stream.onactive = function () {
                // without onactive the tracks of captured stream may be empty
                var tracks = stream.getTracks();
                Promise.all(currentSession.connection.getSenders().map(sender => sender.replaceTrack(stream.getTracks().find(t => t.kind == sender.track.kind), stream)));
            };
        };

        selfStream.onended = function () {
            selfStream.muted = true
            navigator.mediaDevices.getUserMedia({
                audio: true,
                video: false
            }).then(function (stream) {
                if ("srcObject" in selfStream) {
                    selfStream.srcObject = stream;
                } else {
                    selfStream.src = window.URL.createObjectURL(stream);
                }
                selfStream.onloadedmetadata = function (e) {
                    selfStream.play();
                    Promise.all(currentSession.connection.getSenders().map(sender => sender.replaceTrack(stream.getTracks().find(t => t.kind == sender.track.kind), stream)));
                }
                    ;
            }).catch(function (err) {
                console.log(err.name + ": " + err.message);
            });
        }
    }

    $(this).scrollTop();
    var ua = null;
    var remoteStream = document.getElementById('remoteView')
    var selfStream = document.getElementById("selfView");
    var jssipConnection = {
        display_name: null,
        uri: null,
        password: null,
        socket:
        {
            uri: null,
            via_transport: 'auto',
        },
        registrar_server: null,
        contact_uri: null,
        authorization_user: null,
        instance_id: null,
        session_timers: true,
        use_preloaded_route: false,
        pcConfig:
        {
            rtcpMuxPolicy: 'negotiate'
        },
        callstats:
        {
            enabled: false,
            AppID: null,
            AppSecret: null
        }
    };
    var options = {
        'mediaConstraints': {
            'audio': true,
            'video': false
        },
        'pcConfig': {
            'rtcpMuxPolicy': 'negotiate'
        }
    };


    var currentSession = null;
    function registerJsSip() {

        getHistory();
        getContacts();

        jssipConnection.display_name = localStorage.getItem('sipExtension');
        jssipConnection.uri = localStorage.getItem('sipExtension') + '@' + localStorage.getItem('sipServer');
        jssipConnection.password = localStorage.getItem('sipPassword');
        jssipConnection.socket.uri = 'wss://' + localStorage.getItem('sipServer') + '/ws';

        $('#extensionInfo').html('<i class="fa fa-circle text-gray"></i> ' + jssipConnection.uri + '</span>');
        try {
            var socket = new JsSIP.WebSocketInterface(jssipConnection.socket.uri);
            jssipConnection.sockets = [socket];
            ua = new JsSIP.UA(jssipConnection);
            ua.start();

            ua.on('connected', function (e) {
                if (currentSession == null) {
                    writeToConsole("Connected to " + jssipConnection.socket.uri);
                    $('#extensionInfo').html('<i class="fa fa-circle text-red"></i> ' + jssipConnection.uri + '</span>');
                }
            });

            ua.on('registered', function (e) {
                if (currentSession == null) {
                    writeToConsole(jssipConnection.uri + " Registered");
                    $('#extensionInfo').html('<i class="fa fa-circle text-green"></i> ' + jssipConnection.uri + '</span>');
                }
            });

            ua.on('registrationFailed', function (e) {
                writeToConsole("Unknown Registration");
                $('#extensionInfo').html('<i class="fa fa-circle text-red"></i> Unknown Registration</span>');
                currentSession = null
            });



            ua.on('newRTCSession', function (e) {
                currentSession = e.session;


                if (currentSession.direction === "incoming") {
                    writeToConsole('Incoming Call From: ' + e.request.from._display_name)
                    $('#callerId').html(e.request.from._display_name)
                    $('#incomingCallModal').modal();
                }



                currentSession.on('accepted', function (e) {
                    $('#call_btn').addClass('incall_btn');
                    let dt = new Date();
                    document.getElementById("callAnswerTime").innerHTML = dt.toLocaleString();
                    totalDurationSeconds = 0;
                    durationTimer = setInterval(setTime, 1000);
                    writeToConsole("<span class='text-green'>Call Answered</span>");
                    postNotes();
                });

                currentSession.on('ended', function (e) {
                    writeToConsole($('#app-output').html());
                    appOutput('');
                    writeToConsole("<span class='text-red'>Call Ended</span>");
                    let dt = new Date();
                    document.getElementById("callEndTime").innerHTML = dt.toLocaleString();
                    clearInterval(durationTimer);
                    $('#call_btn').removeClass('incall_btn')
                    stopRecording();

                });
                currentSession.on('failed', function (e) {
                    writeToConsole("<span class='text-red'>Error</span>");
                    $('#call_btn').removeClass('incall_btn')
                    stopRecording();

                });

                if (currentSession.connection) {
                    currentSession.connection.ontrack = function (e) {
                        remoteStream.srcObject = e.streams[0];
                        remoteStream.play();
                    }

                }
            });


            ua.on('newMessage', function (e) {
                try {
                    var transcripts = JSON.parse(e.request.body);
                    if (transcripts.transcript) {
                        appOutput(transcripts.transcript);
                        if (transcripts.final) {
                            var markup = markUpTranscripts(transcripts.transcript, transcripts.wordConfidence, transcripts.transcriptConfidence)
                            writeToConsole(markup);
                            appOutput('');
                        }
                        if (transcripts.callId) {
                            currentCallID = transcripts.callId;
                        }
                    }
                } catch (err) {
                    console.log(err);
                }
            });
        } catch (err) {
            $('#extensionInfo').html('<i class="fa fa-circle text-gray"></i> Unknown Registration</span>');
        }
    }

    function startCall(number) {
        writeToConsole('Calling: ' + number)
        ua.call(number, options);
        getHistory();
        startRecording();
    }

    var count = 0;
    $(".digit").on('click', function () {
        var num = ($(this).clone().children().remove().end().text());

        if (currentSession && !currentSession.isEnded()) {
            currentSession.sendDTMF(num.trim());
            writeToConsole("<span class='text-yellow'>Pressed " + num.trim() + "</span>")
        } else if (count < 11) {
            $("#output").append('<span>' + num.trim() + '</span>');
            count++
        }
    });

    $('.fa-long-arrow-left').on('click', function () {
        $('#output span:last-child').remove();
        count--;
    });

    $('#call_btn').on('click', function () {
        if (currentSession && !currentSession.isEnded()) {
            currentSession.terminate()
            $('#call_btn').removeClass('incall_btn');
        } else {
            let dialnum = $("#output").text();
            $('#call_btn').addClass('incall_btn');
            startCall(dialnum);
        }
    });

    $('#registerBtn').on('click', function () {
        localStorage.setItem('sipExtension', $('#sipExtension').val());
        localStorage.setItem('sipPassword', $('#sipPassword').val());
        localStorage.setItem('sipServer', $('#sipServer').val());
        registerJsSip()
    });

    $('#logoutBtn').on('click', function () {
        localStorage.clear();
        location.reload();
    });

    $('#clearBtn').on('click', function () {
        $('#history').html('');
        $('#app-output').html('');
        scrollPage();
    });

    $('#answerBtn').on('click', function () {
        if (currentSession && !currentSession.isEnded()) {
            currentSession.answer(options);
            $('#call_btn').addClass('incall_btn');
            $('#incomingCallModal').modal('hide');
            if (currentSession.connection) {
                currentSession.connection.ontrack = function (e) {
                    remoteStream.srcObject = e.streams[0];
                    remoteStream.play();
                }
            }
        }

    });

    $('#ignoreBtn').on('click', function () {
        if (currentSession && !currentSession.isEnded()) {
            currentSession.terminate()
            $('#call_btn').removeClass('incall_btn');
            $('#incomingCallModal').modal('hide');
        }

    });

    function getHistory() {
        $.ajax({
            url: './iprelay/getHistory',
            type: 'GET',
            data: { "extension": localStorage.getItem('sipExtension') },
            datatype: 'json',
            success: function (data) {
                $('#call_history').html("");
                //Loop through the result and populate the table 
                for (var i = 0; i < data.results.length; i++) {
                    var timeOfDay;
                    var localDate = new String(new Date(data.results[i].call_start));
                    var date = localDate.slice(4, 7) + " " + localDate.slice(8, 10) + ", " + localDate.slice(11, 15);
                    if (parseInt(localDate.slice(16, 18)) > 12) {
                        timeOfDay = "PM"
                    } else {
                        timeOfDay = "AM"
                    }
                    var time = ((localDate.slice(16, 18) + 11) % 12 + 1) + localDate.slice(18, 24) + " " + timeOfDay;
                    var liAttribute = document.createElement('li');
                    liAttribute.setAttribute("style", "font-size:small; cursor:pointer;");
                    liAttribute.setAttribute("id", "call_hist");
                    liAttribute.setAttribute("onclick", "reDial(this)");
                    liAttribute.innerHTML = data.results[i].dest_phone_number + '<span class="pull-right badge bg-blue" style="font-size:xx-small">' + date + ", " + time + "</span>";
                    $('#call_history').append(liAttribute);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("error")
            }
        });
    }

    function getContacts() {
        $.ajax({
            url: './iprelay/getContacts',
            type: 'GET',
            data: { "extension": localStorage.getItem('sipExtension') },
            datatype: 'json',
            success: function (data) {
                $('#contacts').html("");
                //Loop through the result and populate the table 
                for (var i = 0; i < data.results.length; i++) {
                    var username = data.results[i].username;
                    var number = data.results[i].cellphone;
                    var liAttribute = document.createElement('li');
                    liAttribute.setAttribute("style", "font-size:small; cursor:pointer;");
                    liAttribute.setAttribute("id", number);
                    liAttribute.setAttribute("onclick", "callContact(this)");
                    liAttribute.innerHTML = username + " " + '<span class="pull-right badge bg-blue" style="font-size:x-small">' + number + "</span>";
                    $('#contacts').append(liAttribute);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("error")
            }
        });
    }

    function reDial(element) {
        $("#output").html("");
        $("#output").append('<span>' + element.innerHTML.slice(0, 10) + '</span>');
    }

    function callContact(element) {
        $("#output").html("");
        $("#output").append('<span>' + element.id + '</span>');
    }



    function writeToConsole(text) {
        $('#history').append(text + '\n');
        scrollPage();
    }

    function appOutput(text) {
        $('#app-output').html(text);
        scrollPage();
    }

    function markUpTranscripts(text, wC, tC) {
        var textArray = text.split(" ");
        if (localStorage.getItem('wordConfidenceEnabled') == 'true') {
            var mConfPercent = $('#mediumConfidencePercent').val()
            var mConfColor = $('#mediumConfidenceColor').val()
            var lConfPercent = $('#lowConfidencePercent').val()
            var lConfColor = $('#lowConfidenceColor').val()
            var underline = $("#wordConfidenceUnderlineCheckbox").prop("checked")
            var bold = $("#wordConfidenceBoldCheckbox").prop("checked")
            var italic = $("#wordConfidenceItalicCheckbox").prop("checked")
            var font = ""
            if (underline || bold || italic) {
                font += bold ? "font-weight: 900;" : ""
                font += italic ? "font-style: italic;" : ""
                font += underline ? " text-decoration: underline;" : ""
            }
            lConfFontString = (lConfColor != "none") ? "color:" + lConfColor + ";" : "";
            lConfFontString += font;
            mConfFontString = (mConfColor != "none") ? "color:" + mConfColor + ";" : "";
            mConfFontString += font;


            //console.log(textArray)
            if (wC != null) {
                for (var i = 0; i < wC.length; i++) {
                    var p = parseInt(wC[i] * 100);
                    if (p < lConfPercent) {
                        textArray[i] = '<span style="' + lConfFontString + '" title="' + p + '%">' + textArray[i] + '</span>';
                    } else if (p < mConfPercent) {
                        textArray[i] = '<span style="' + mConfFontString + '" title="' + p + '%">' + textArray[i] + '</span>';
                    }
                }
            }
        }

        if (localStorage.getItem('phraseConfidenceEnabled') == 'true') {
            if (tC != null) {
                tC = parseInt(tC * 100);
                textArray[textArray.length - 1] = textArray[textArray.length - 1] + "(" + tC + "%)"
            }
        }
        //alert(textArray)
        return textArray.join(" ");
    }

    let dummydata = {
        "transcript": "This is confidence text scoring but we will keep going to make this even longer. ",
        "final": true,
        "timestamp": "2020-11-19T15:26:56.343Z",
        "raw": null,
        "wordConfidence": [0.33, 0.27, 0.97, 0.69, 0.99],
        "transcriptConfidence": 0.65,
        "event": "message-stream",
        "source": "PSTN",
        "extension": "5001",
        "msgid": 1605799613675,
        "sttengine": "W"
    }
    /*
    var i = 0;
    setInterval(function () {
        var temp = markUpTranscripts(dummydata.transcript, dummydata.wordConfidence, dummydata.transcriptConfidence)
        if (i < 20)
           // writeToConsole(temp);
        i++
    }, 100)*/

    function scrollPage(text) {
        var element1 = document.getElementById("history");
        var element2 = document.getElementById("app-output");
        $('#terminal').scrollTop(element1.scrollHeight + element2.scrollHeight + 100);
    }

    var video = document.querySelector("#webCamElement");
    if (navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(function (stream) {
                video.srcObject = stream;
            })
            .catch(function (err0r) {
                console.log("Something went wrong!");
            });
    }
    $('#kbCert_btn').on('click', function () {
        window.open("https://127.0.0.1:6298", "", "width=400,height=200");
    });

    $('#kbTest_btn').on('click', function () {
        sendTextToKeyboard("This is a test of the ACE Quill Keyboard.")
    });

    function sendTextToKeyboard(message, pacing) {
        $.post('https://127.0.0.1:6298/type', { message, pacing }).done(function (msg) { })
        $.post('./iprelay/logIPRelay', { callID: currentCallID, text: message, isDUT: true }).done(function (msg) { })
    }

    setInterval(function () {
        $.get("https://127.0.0.1:6298", function (data, status) {
            if (status == 'success') {
                $('#keyboardConnected').removeClass('text-danger');
                $('#keyboardConnected').addClass('text-success');
                $('#keyboardConnected').attr('title', 'Connected');
            } else {
                $('#keyboardConnected').removeClass('text-success');
                $('#keyboardConnected').addClass('text-danger');

                $('#keyboardConnected').attr('title', 'Error');
            }
        }).fail(function () {
            $('#keyboardConnected').removeClass('text-success');
            $('#keyboardConnected').addClass('text-danger');

            $('#keyboardConnected').attr('title', 'Error');
        });
    }, 1000);

    function addAQChatBubble(audioId, msg) {
        let msgblock = document.createElement('div');
        let msgimage = document.createElement('img');
        let msginfo = document.createElement('div');
        let msgsender = document.createElement('span');
        let msgclicktime = document.createElement('span');
        let msgtext = document.createElement('div');


        $(msgblock).on("click", function () {
            $(msgblock).addClass("chatClicked")
            let dt = new Date();
            $(msgclicktime).html(dt.toLocaleString())
            playScenarioSpeech(audioId);
            writeToConsole('<span class="text-yellow">> ' + msg + '</span>');
            $.post('./iprelay/logIPRelay', { callID: currentCallID, text: msg, isDUT: false }).done(function (msg) { })
        })

        $(msgsender).addClass("direct-chat-name pull-right").html("ACE Quill").appendTo(msginfo);
        $(msgclicktime).addClass("direct-chat-timestamp pull-left").appendTo(msginfo);
        $(msginfo).addClass("direct-chat-info clearfix").appendTo(msgblock);
        $(msgimage).addClass("direct-chat-img").attr("src", "./images/acequill.png").appendTo(msgblock);
        $(msgtext).addClass("direct-chat-text").html(msg).appendTo(msgblock);
        $(msgblock).addClass("direct-chat-msg right").appendTo($("#scenarioChat"));
    }

    loadIPRelayScenario()

    function loadIPRelayScenario() {
        $('#scenarioChat').html('');
        //TODO build get function to get scenario for call. below is testing data
        $.get("./iprelayscenario", {
            "extension": localStorage.getItem('sipExtension')
        },
            function (data, status) {
                data.forEach(bubble => {
                    console.log(JSON.stringify(bubble))
                    if (bubble.isDUT) {
                        addDUTChatBubble(bubble.id, bubble.bubbleText, bubble.rawText)
                    } else {
                        addAQChatBubble(bubble.id, bubble.bubbleText)
                    }
                });
            });
    }


    function addDUTChatBubble(textId, msg, msgEncoded) {
        let msgblock = document.createElement('div');
        let msgimage = document.createElement('img');
        let msginfo = document.createElement('div');
        let msgsender = document.createElement('span');
        let msgclicktime = document.createElement('span');
        let msgtext = document.createElement('div');

        $(msgblock).on("click", function () {
            $(msgblock).addClass("chatClicked")
            let dt = new Date();
            $(msgclicktime).html(dt.toLocaleString())
            msgEncoded ? sendTextToKeyboard(msgEncoded) : sendTextToKeyboard(msg);
        })

        $(msgsender).addClass("direct-chat-name pull-left").html("Device Under Test").appendTo(msginfo);
        $(msgclicktime).addClass("direct-chat-timestamp pull-right").appendTo(msginfo);
        $(msginfo).addClass("direct-chat-info clearfix").appendTo(msgblock);
        $(msgimage).addClass("direct-chat-img").attr("src", "./images/iprelay_icon.png").appendTo(msgblock);
        $(msgtext).addClass("direct-chat-text").html(msg).appendTo(msgblock);
        $(msgblock).addClass("direct-chat-msg").appendTo($("#scenarioChat"));
    }

    function playScenarioSpeech(audioId) {
        selfStream.src = './iprelay/playScenarioSpeech?audioId=' + audioId;
        selfStream.type = 'type="audio/wav"';
        selfStream.loop = false;
        selfStream.muted = false

        var playPromise = selfStream.play();
        if (playPromise !== undefined) {
            playPromise.then(function () {//currentSession.unmute({audio: false, video: true});
            }).catch(function (error) {
                console.error('ERROR - this browser does not support play() Promise');
            });
        }

        selfStream.onplay = function () {
            var stream = selfStream.captureStream();
            stream.onactive = function () {
                // without onactive the tracks of captured stream may be empty
                var tracks = stream.getTracks();
                Promise.all(currentSession.connection.getSenders().map(sender => sender.replaceTrack(stream.getTracks().find(t => t.kind == sender.track.kind), stream)));
            };
        };

        selfStream.onended = function () {
            selfStream.muted = true
            navigator.mediaDevices.getUserMedia({
                audio: true,
                video: false
            }).then(function (stream) {
                if ("srcObject" in selfStream) {
                    selfStream.srcObject = stream;
                } else {
                    selfStream.src = window.URL.createObjectURL(stream);
                }
                selfStream.onloadedmetadata = function (e) {
                    selfStream.play();
                    Promise.all(currentSession.connection.getSenders().map(sender => sender.replaceTrack(stream.getTracks().find(t => t.kind == sender.track.kind), stream)));
                }
                    ;
            }).catch(function (err) {
                console.log(err.name + ": " + err.message);
            });
        }
    }

    function postNotes() {
        let notes = $("#callNotes").val();
        if (notes.length > 0) {
            $.ajax({
                url: './iprelay/savenotes',
                type: 'POST',
                data: { "notes": notes, "extension": localStorage.getItem('sipExtension') },
                datatype: 'json',
                success: function (data) {
                    console.log("success", data.callID);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log("error");
                }
            });
        }
    }

    var recorderCamera, recorderScreen;
    const sleep = m => new Promise(r => setTimeout(r, m));
    // await sleep(3000); //Example on how to use. 

    var isRecordingStarted = false;
    var isStoppedRecording = false;

    var elementToShare = document.getElementById('toRecord');
    var canvas2d = document.createElement('canvas');
    var context = canvas2d.getContext('2d');

    canvas2d.width = elementToShare.clientWidth;
    canvas2d.height = elementToShare.clientHeight;

    var isRecordingStarted = false;
    var isStoppedRecording = false;

    canvas2d.style.top = 0;
    canvas2d.style.left = 0;
    canvas2d.style.zIndex = -1;
    canvas2d.style.display = 'none';
    (document.body || document.documentElement).appendChild(canvas2d);

    function looper() {
        html2canvas(elementToShare, { grabMouse: true, foreignObjectRendering: true }).then(function (canvas) {
            context.clearRect(0, 0, canvas2d.width, canvas2d.height);
            context.drawImage(canvas, 0, 0, canvas2d.width, canvas2d.height);

            if (isStoppedRecording) {
                return;
            }

            setTimeout(looper, 1);
        })
    };

    function startRecording() {
        let recordScreen = $('#recordScreen').is(':checked');
        let recordCamera = $('#recordCamera').is(':checked');
        if (recordCamera || recordScreen) {
            $('#recordOptions').addClass("recording");
        }
        if (recordCamera) {
            navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            }).then(async function (stream) {
                recorderCamera = RecordRTC(stream, {
                    type: 'video',
                    mimeType: 'video/webm',
                });
                recorderCamera.startRecording();
            });
        }

        if (recordScreen) {
            console.log("Record Screen")
            isRecordingStarted = true;
            isStoppedRecording = false;
            looper();
             recorderScreen = new RecordRTC(canvas2d, {
                type: 'canvas',
                mimeType: 'video/webm'
                });
            recorderScreen.startRecording();
        }
    }
    function stopRecording() {
        //let recordScreen = $('#recordScreen').is(':checked');
        //let recordCamera = $('#recordCamera').is(':checked');
        $('#recordOptions').removeClass("recording");
        let timestamp = new Date().getTime();
        if (recorderCamera) {
            recorderCamera.stopRecording(function () {
                let blob = recorderCamera.getBlob();
                let name = "camera_" + timestamp + ".webm";
                postRecording(blob, name, "camera");
                recorderCamera = null;
            });
        }

        if (recorderScreen) {
            isStoppedRecording = true;
            isRecordingStarted = false;
            recorderScreen.stopRecording(function () {
                let blob = recorderScreen.getBlob();
                let name = "screen_" + timestamp + ".webm";
                postRecording(blob, name, "screen");
                recorderScreen = null;
            });
        }

    }

    function postRecording(blob, filename, source) {
        console.log('Post the file');
        if (blob.size > 0) {
            //console.log("Call Data: " + localStorage.calldata);
            var file = new File([blob], filename, {
                type: 'video/webm'
            });

            xhr('./iprelay/uploadRecording', file, source, function (responseText) {
                console.info('FileUploaded: ' + responseText);
            });
        } else {
            console.log("no data in video record");
        }

    }
    // XHR2/FormData
    function xhr(url, data, source, callback) {
        var request = new XMLHttpRequest();
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                callback(request.responseText);
            }
        };

        request.open('POST', url);
        console.log("URL is: " + url);
        var formData = new FormData();
        formData.append('file', data);
        formData.append('source', source);
        formData.append('extension', localStorage.getItem('sipExtension'));
        request.send(formData);
    }

    var webcam = document.getElementById("webCamElement")
    var rect = webcam.getBoundingClientRect();
    console.log(rect.top, rect.right, rect.bottom, rect.left);


    var callNotes = document.getElementById("callNotes");

    webcam.addEventListener('play', function () {
        var $this = this; //cache
        (function loop() {
            if (!$this.paused && !$this.ended) {
                context.drawImage($this, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
                setTimeout(loop, 1000 / 30); // drawing at 30fps
            }
        })();
    }, 0);

    callNotes.addEventListener('input', function () {
                document.getElementById("callNotes").placeholder = document.getElementById("callNotes").value;
    }, 0);

</script>
</html>