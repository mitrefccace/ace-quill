#!/usr/bin/env node

/*
                                 NOTICE

This (software/technical data) was produced for the U. S. Government under
Contract Number HHSM-500-2012-00008I, and is subject to Federal Acquisition
Regulation Clause 52.227-14, Rights in Data-General. No other use other than
that granted to the U. S. Government, or to those acting on behalf of the U. S.
Government under that Clause is authorized without the express written
permission of The MITRE Corporation. For further information, please contact
The MITRE Corporation, Contracts Management Office, 7515 Colshire Drive,
McLean, VA 22102-7539, (703) 983-6000.

                        Â©2018 The MITRE Corporation.
*/

/**
 * Module dependencies.
 */
// const debug = require('debug')('init:server');
const config = require("./../configs/config.js");
const https = require('https');
const http = require('http');
const fs = require('fs');
let io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */
const app = require('../app');

const port = config.port;
app.set('port', port);

/**
 * Create HTTP server.
* */
var server = null;

if (config.ssl.enabled) {
  console.info('Listening for HTTPS connections');
  const credentials = {
    key: fs.readFileSync(config.ssl.key),
    cert: fs.readFileSync(config.ssl.cert),
  };
  server = https.createServer(credentials, app);
} else {
  console.info("Listening for HTTP connections");
  server = http.createServer(app);
}

io = require('socket.io')(server);
require('../sockets/admin')(io.of('/admin'));
require('../asterisk');

if (config.sttServices) {
  process.env.GOOGLE_APPLICATION_CREDENTIALS = `${process.cwd()}/configs/google/google.json`;
} else {
  info.info(`STT Service is currently DISABLED.
  This allows the ACE Quill web server to be run without including the STT node_modules.`);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.info(`Listening on port: ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
